--  ---------------------------
--  Basics
--  ---------------------------

[case test_no_type]
# cmd: mypy a.py
[file a.py]
import attr

@attr.s
class C:
    a = attr.ib()
    b = attr.ib(init=False, metadata={'foo': 1})

c = C()
reveal_type(c.a)  # Any
reveal_type(C.a)  # Any
reveal_type(c.b)  # Any
reveal_type(C.b)  # Any
[out]
a.py:5: error: Need type annotation for variable
a.py:9: error: Revealed type is 'Any'
a.py:10: error: Revealed type is 'Any'
a.py:10: error: Cannot determine type of 'a'
a.py:11: error: Revealed type is 'Any'
a.py:12: error: Revealed type is 'Any'
a.py:12: error: Cannot determine type of 'b'

[case test_type_arg]
# cmd: mypy a.py
[file a.py]
import attr

@attr.s
class C(object):
    a = attr.ib(type=int)

c = C()
reveal_type(c.a)  # int
reveal_type(C.a)  # int
[out]
a.py:8: error: Revealed type is 'builtins.int*'
a.py:9: error: Revealed type is 'builtins.int*'


[case test_type_annotations]
# cmd: mypy a.py
[file a.py]
import attr

@attr.s
class C(object):
    a : int = attr.ib()

c = C()
reveal_type(c.a)  # int
reveal_type(C.a)  # int
[out]
a.py:8: error: Revealed type is 'builtins.int'
a.py:9: error: Revealed type is 'builtins.int'

--  ---------------------------
--  Defaults
--  ---------------------------

[case test_defaults_no_type]
# cmd: mypy a.py
[file a.py]
import attr

a = attr.ib(default=0)
reveal_type(a)  # int

b = attr.ib(0)
reveal_type(b)  # int

[out]
a.py:4: error: Revealed type is 'builtins.int*'
a.py:7: error: Revealed type is 'builtins.int*'


[case test_defaults_type_arg]
# cmd: mypy a.py
[file a.py]
import attr

a = attr.ib(type=int)
reveal_type(a)  # int

b = attr.ib(default=0, type=int)
reveal_type(b)  # int

c = attr.ib(default='bad', type=int)
reveal_type(c)  # object, the common base of str and int

[out]
a.py:4: error: Revealed type is 'builtins.int*'
a.py:7: error: Revealed type is 'builtins.int*'
a.py:10: error: Revealed type is 'builtins.object*'


[case test_defaults_type_annotations]
# cmd: mypy a.py
[file a.py]
import attr

a: int = attr.ib()
reveal_type(a)  # int

b: int = attr.ib(default=0)
reveal_type(b)  # int

c: int = attr.ib(default=0, type=str)  # error: object <> int

[out]
a.py:4: error: Revealed type is 'builtins.int'
a.py:7: error: Revealed type is 'builtins.int'
a.py:9: error: Incompatible types in assignment (expression has type "object", variable has type "int")


--  ---------------------------
--  Factory Defaults
--  ---------------------------

[case test_factory_defaults_type_arg]
# cmd: mypy a.py
[file a.py]
import attr
from typing import List

a = attr.ib(type=List[int])
reveal_type(a)  # List[int]

b = attr.ib(default=attr.Factory(list), type=List[int])
reveal_type(b)  # object:  FIXME: shouldn't the `default` type be upgraded from `list` to `List[int]``?  make a mypy github issue

c = attr.ib(default=attr.Factory(list), type=int)
reveal_type(c)  # object, the common base of list and int

def int_factory() -> int:
    return 0

d = attr.ib(default=attr.Factory(int_factory), type=int)
reveal_type(d)  # int

[out]
a.py:5: error: Revealed type is 'builtins.list*[builtins.int*]'
a.py:8: error: Revealed type is 'builtins.object*'
a.py:11: error: Revealed type is 'builtins.object*'
a.py:17: error: Revealed type is 'builtins.int*'


[case test_factory_defaults_type_annotations]
# cmd: mypy a.py
[file a.py]
import attr
from typing import List

a: List[int] = attr.ib()
reveal_type(a)  # List[int]

b: List[int] = attr.ib(default=attr.Factory(list), type=List[int])
reveal_type(b)  # List[int]

c: List[int] = attr.ib(default=attr.Factory(list), type=str)  # error: str <> List[int]

def int_factory() -> int:
    return 0

d: int = attr.ib(default=attr.Factory(int_factory))
reveal_type(d)  # int

[out]
a.py:5: error: Revealed type is 'builtins.list[builtins.int]'
a.py:8: error: Revealed type is 'builtins.list[builtins.int]'
a.py:10: error: Argument 2 has incompatible type "Type[str]"; expected "Type[List[int]]"
a.py:16: error: Revealed type is 'builtins.int'


--  ---------------------------
--  Validators
--  ---------------------------

[case test_validators]
# cmd: mypy a.py
[file a.py]
import attr
from attr.validators import in_, and_, instance_of

a = attr.ib(type=int, validator=in_([1, 2, 3]))
b = attr.ib(type=int, validator=[in_([1, 2, 3]), instance_of(int)])
c = attr.ib(type=int, validator=(in_([1, 2, 3]), instance_of(int)))
d = attr.ib(type=int, validator=and_(in_([1, 2, 3]), instance_of(int)))
e = attr.ib(type=int, validator=1)  # error

[out]
a.py:8: error: Argument 2 has incompatible type "int"; expected "Union[Callable[[Any, Attribute[Any], int], Any], List[Callable[[Any, Attribute[Any], int], Any]], Tuple[Callable[[Any, Attribute[Any], int], Any], ...]]"

[case test_custom_validators]
# cmd: mypy a.py
[file a.py]
import attr

def validate_int(inst, at, val: int):
    pass

def validate_str(inst, at, val: str):
    pass

a = attr.ib(type=int, validator=validate_int)  # int
b = attr.ib(type=int, validator=validate_str)  # error

reveal_type(a)

[out]
a.py:10: error: Argument 2 has incompatible type "Callable[[Any, Any, str], Any]"; expected "Union[Callable[[Any, Attribute[Any], int], Any], List[Callable[[Any, Attribute[Any], int], Any]], Tuple[Callable[[Any, Attribute[Any], int], Any], ...]]"
a.py:12: error: Revealed type is 'builtins.int'

--  ---------------------------
--  Make
--  ---------------------------

[case test_make_from_dict]
# cmd: mypy a.py
[file a.py]
import attr
C = attr.make_class("C", {
    "x": attr.ib(type=int),
    "y": attr.ib()
})
[out]


[case test_make_from_str]
# cmd: mypy a.py
[file a.py]
import attr
C = attr.make_class("C", ["x", "y"])
[out]


[case test_astuple]
# cmd: mypy a.py
[file a.py]
import attr
@attr.s
class C:
    a: int = attr.ib()

t1 = attr.astuple(C)
reveal_type(t1)

[out]
a.py:7: error: Revealed type is 'builtins.tuple[Any]'


[case test_asdict]
# cmd: mypy a.py
[file a.py]
import attr
@attr.s
class C:
    a: int = attr.ib()

t1 = attr.asdict(C)
reveal_type(t1)

[out]
a.py:7: error: Revealed type is 'builtins.dict[builtins.str, Any]'
